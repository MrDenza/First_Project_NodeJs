user denza;
worker_processes auto;
error_log /home/denza/nginx_logs/error.log warn;

events {
    worker_connections 2048;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Очередь запросов
    limit_req_zone $binary_remote_addr zone=request_queue:10m rate=20r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

    proxy_cache_path /home/denza/nginx_cache levels=1:2 keys_zone=backend_cache:10m
                     max_size=1g inactive=60m use_temp_path=off;

    proxy_cache_key "$scheme$request_method$host$request_uri$is_args$args";
    proxy_cache_lock on;
    proxy_cache_revalidate on;

    # Короткое время жизни кеша (1 секунда) для "свежих" ответов
    proxy_cache_valid 200 1s;
    proxy_cache_valid any 5m; # Для ошибок - 5 минут

    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml image/svg+xml;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_vary on;

    server {
        listen 3200;
        server_name 185.244.50.60;
        root /home/denza/First_Project_NodeJs/project/client/public;

        client_max_body_size 100M;
        index nothing.html;

        # Общие ограничения
        limit_req zone=request_queue burst=30 nodelay;
        limit_conn conn_limit 20;

        # Корневой путь
        location = / {
            limit_req zone=request_queue burst=10 delay=5;

            proxy_pass http://backend;
            proxy_cache backend_cache;

            # Разрешаем использовать stale-кеш только при ошибках
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            add_header X-Cache-Status $upstream_cache_status;
            add_header X-RateLimit-Limit "10";
        }

        # Статика
        location / {
            try_files $uri $uri/ @backend;
            expires 1d;
            add_header Cache-Control "public, immutable";

            location ~* \.(js|mjs)$ {
                add_header Content-Type application/javascript;
            }
        }

        # Загрузки
        location /uploads/ {
            limit_req zone=request_queue burst=15;

            alias /home/denza/First_Project_NodeJs/project/upload/;
            expires 1d;
            add_header Cache-Control "public";
        }

        # SSR-запросы
        location @backend {
            limit_req zone=request_queue burst=20 delay=10;

            proxy_pass http://backend;
            proxy_cache backend_cache;

            # Разрешаем stale-кеш только при ошибках
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;

            # Для API всегда отключаем кэш
            if ($request_uri ~* "^/api") {
                set $no_cache 1;
            }
            proxy_cache_bypass $no_cache;
            proxy_no_cache $no_cache;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            add_header X-Cache-Status $upstream_cache_status;
            add_header X-RateLimit-Limit "20";
        }
    }

    upstream backend {
        server 127.0.0.1:3100 max_conns=30;
        server 127.0.0.1:3110 backup max_conns=20;
    }
}