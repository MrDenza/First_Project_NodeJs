{"version":3,"file":"script-main.js","sources":["../../source/constants/apiRoutes.js","../../source/utils/postApi.js","../../source/redux/reducers/userData/userDataSlice.js","../../source/redux/store.js","../../source/components/Auth/AuthForm/AuthForm.jsx","../../source/components/Auth/UnverifiedNotice/UnverifiedNotice.jsx","../../source/utils/validateAuthForm.js","../../source/constants/clientRoutes.js","../../source/pages/Auth/PageAuth.jsx","../../source/pages/ErrorPage.jsx","../../source/pages/Messaria.jsx","../../source/routes/routes.jsx","../../source/entry-server.jsx","../../source/components/routes/SafeNavigate.jsx","../../source/components/routes/ProtectedRoute.jsx","../../source/routes/PagesRouter.jsx","../../source/App.jsx","../../source/main.jsx"],"sourcesContent":["export const API_ROUTES = {\r\n    user: {\r\n        login: \"/api/user/login\",\r\n        register: \"/api/user/register\",\r\n        resendVerification: \"/api/user/resend-verification\",\r\n        validToken: \"/api/user/validate-tokens\",\r\n    },\r\n};","\"use strict\";\n\nconst isServer = typeof window === \"undefined\";\nconst API_BASE_URL = isServer ? process.env.API_BASE_URL || \"http://localhost:3100\" : \"\";\nconst PROXY_API_PATH = import.meta.env.VITE_PROXY_API_PATH || \"\";\n\n/**\n * Универсальная функция для POST-запросов к API.\n *\n * @param {string} uri - URI эндпоинта (относительно PROXY_API_PATH)\n * @param {object|FormData|string|null} [data={}] - Данные для отправки в теле запроса\n * @param {object} [options={}] - Дополнительные опции\n * @param {string} [options.accept=\"application/json\"] - Значение заголовка Accept\n * @param {object} [options.headers={}] - Дополнительные заголовки\n * @param {string} [options.contentType] - Явно указать Content-Type (по умолчанию зависит от data)\n * @returns {Promise<any>} - Возвращает распарсенный ответ (json, text, blob)\n * @throws {Error} - В случае ошибки содержит статус и тело ответа\n */\n\nexport const postApi = async (uri, data = {}, options = {}) => {\n    const {\n        accept = \"application/json\",\n        headers = {},\n        contentType,\n    } = options;\n\n    // Определяем заголовки\n    const fetchHeaders = new Headers({\n        Accept: accept,\n        ...headers,\n    });\n\n    // Определяем Content-Type, если не передан явно\n    let body;\n\n    if (data instanceof FormData) {\n        // Для FormData Content-Type не нужно ставить, браузер сам поставит с boundary\n        body = data;\n\n    } else if (data instanceof Blob || data instanceof File) {\n        body = data;\n        // Если contentType передан явно, ставим его, иначе не ставим Content-Type,\n        // чтобы браузер сам поставил (обычно File содержит свой тип)\n        if (contentType) {\n            fetchHeaders.set(\"Content-Type\", contentType);\n        } else if (!fetchHeaders.has(\"Content-Type\")) {\n            // Не ставим Content-Type, браузер сам поставит\n        }\n    } else if (typeof data === \"string\") {\n\n        // Если передана строка, отправляем как есть\n        body = data;\n        if (contentType) {\n            fetchHeaders.set(\"Content-Type\", contentType);\n        } else if (!fetchHeaders.has(\"Content-Type\")) {\n            fetchHeaders.set(\"Content-Type\", \"text/plain;charset=UTF-8\");\n        }\n    } else if (data && typeof data === \"object\") {\n        // Для объекта по умолчанию JSON\n        body = JSON.stringify(data);\n        if (contentType) {\n            fetchHeaders.set(\"Content-Type\", contentType);\n        } else if (!fetchHeaders.has(\"Content-Type\")) {\n            fetchHeaders.set(\"Content-Type\", \"application/json;charset=UTF-8\");\n        }\n    } else {\n        // Если data null или undefined\n        body = null;\n    }\n\n    const response = await fetch(`${API_BASE_URL}${PROXY_API_PATH}${uri}`, {\n        method: \"POST\",\n        headers: fetchHeaders,\n        body,\n    });\n\n    const contentTypeResponse = response.headers.get(\"Content-Type\") || \"\";\n\n    let responseBody;\n    if (contentTypeResponse.includes(\"application/json\")) {\n        responseBody = await response.json();\n    } else if (contentTypeResponse.startsWith(\"text/\")) {\n        responseBody = await response.text();\n    } else if (\n        contentTypeResponse.includes(\"application/octet-stream\") ||\n        contentTypeResponse.includes(\"application/pdf\") ||\n        contentTypeResponse.startsWith(\"image/\") ||\n        contentTypeResponse.startsWith(\"audio/\") ||\n        contentTypeResponse.startsWith(\"video/\")\n    ) {\n        responseBody = await response.blob();\n    } else {\n        // fallback\n        responseBody = await response.text();\n    }\n\n    console.log(\"Ответ запроса\", responseBody);\n\n    if (!response.ok || (responseBody && responseBody.type === \"error\")) {\n        let errorMessage = response.statusText || \"Неизвестная ошибка\";\n\n        if (responseBody && typeof responseBody === \"object\") {\n            if (responseBody.message) {\n                errorMessage = responseBody.message;\n            }\n\n            const error = new Error(errorMessage);\n            error.status = response.status || responseBody.status || 500;\n\n            for (const [key, value] of Object.entries(responseBody)) {\n                if (key !== 'message') {\n                    error[key] = value;\n                }\n            }\n\n            throw error;\n        } else {\n            const error = new Error(errorMessage);\n            error.status = response.status || 500;\n            throw error;\n        }\n    }\n    return responseBody;\n};\n\n/* Использование:\ntry {\n    const data = { name: \"Иван\", age: 30 };\n    const result = await postApi(\"/users/create\", data);\n    console.log(\"Ответ сервера:\", result);\n} catch (err) {\n    console.error(\"Ошибка запроса:\", err.status, err.message, err.body, error.errors);\n}\n*/","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { API_ROUTES } from \"../../../constants/apiRoutes\";\nimport { postApi } from \"../../../utils/postApi\";\n\nexport const regUser = createAsyncThunk(\"userData/regUser\", async (data, thunkAPI) => {\n    try {\n        return await postApi(API_ROUTES.user.register, data);\n    } catch (err) {\n        return thunkAPI.rejectWithValue(typeof err === \"object\" ? err : \"Ошибка регистрации. Попробуйте позже.\");\n    }\n});\n\nexport const loginUser = createAsyncThunk(\"userData/loginUser\", async (data, thunkAPI) => {\n    try {\n        return await postApi(API_ROUTES.user.login, data);\n    } catch (err) {\n        return thunkAPI.rejectWithValue(typeof err === \"object\" ? err : \"Ошибка авторизации. Попробуйте позже.\");\n    }\n});\n\nexport const resendVerification = createAsyncThunk(\"userData/resendVerification\", async (data, thunkAPI) => {\n    try {\n        const state = thunkAPI.getState();\n        const tempAuthToken = state.userData?.tempAuthToken || localStorage.getItem(\"tempAuthToken\");\n        if (!tempAuthToken) {\n            return thunkAPI.rejectWithValue(\"Ошибка отправки письма активации. Авторизуйтесь снова.\");\n        }\n        return await postApi(API_ROUTES.user.resendVerification, { tempAuthToken });\n    } catch (err) {\n        return thunkAPI.rejectWithValue(typeof err === \"object\" ? err : \"Время сессии истекло. Авторизуйтесь снова.\");\n    }\n});\n\nexport const checkAuth = createAsyncThunk(\"userData/checkAuth\", async (data, thunkAPI) => {\n    try {\n        const state = thunkAPI.getState();\n        const clientAccessToken = (typeof window !== 'undefined') ? localStorage.getItem('accessToken') : '';\n        const accessToken = state.userData?.accessToken || clientAccessToken;\n        return await postApi(\n            API_ROUTES.user.validToken,\n            {},\n            {\n                // Для SSR передаем куки из запроса\n                headers: {\n                    Cookie: typeof window === 'undefined'\n                        ? thunkAPI.extra?.req.headers.cookie || ''\n                        : '',\n                    Authorization: `Bearer ${accessToken}`,\n                }\n            }\n        );\n    } catch (err) {\n        return thunkAPI.rejectWithValue(typeof err === \"object\" ? err : \"Время сессии истекло. Авторизуйтесь снова.\");\n    }\n});\n\nconst initialState = {\n    user: \"\", // имя пользователя\n    isAuth: false, // если пользователь успешно авторизован и активирован\n    errAuth: null, // ошибки\n    registerStatus: \"idle\", // состояние запроса regUser: 'idle' | 'pending' | 'registered' | 'error'\n    resendActStatus: \"idle\", // состояние запроса resendVerification: 'idle' | 'pending' | 'shipped' | 'error'\n    loginStatus: \"idle\", // состояние запроса loginUser: 'idle' | 'pending' | 'authenticated' | 'unactivated' | 'error'\n    tempAuthToken: null, // временный токен для отправки активации\n    accessToken: null, // токен доступа - даётся в статусе authenticated\n};\n\nexport const userDataSlice = createSlice({\n    name: \"userData\",\n    initialState,\n    reducers: {\n        setUserData: (state, action) => {\n            state.user = action.payload;\n        },\n        setUserIsAuth: (state, action) => {\n            state.isAuth = action.payload;\n        },\n        clearError: (state, action) => {\n            if (action.payload) state.errAuth = initialState.errAuth;\n        },\n        setAuthToken: (state, action) => {\n            if (action.payload !== state.tempAuthToken && typeof action.payload === \"string\") {\n                state.tempAuthToken = action.payload;\n            }\n        },\n        setResendCooldown: (state, action) => {\n            state.resendCooldown = action.payload;\n        },\n    },\n    extraReducers: (builder) => {\n        builder\n            // --- regUser ---\n            .addCase(regUser.pending, (state) => {\n                state.registerStatus = \"pending\";\n                state.resendActStatus = initialState.resendActStatus;\n                state.loginStatus = initialState.loginStatus;\n                state.errAuth = null;\n            })\n            .addCase(regUser.fulfilled, (state, action) => {\n                if (action.payload.success) {\n                    state.registerStatus = \"registered\";\n                    if (typeof action.payload.data?.tempAuthToken === \"string\") {\n                        state.tempAuthToken = action.payload.data?.tempAuthToken;\n                        localStorage.setItem(\"tempAuthToken\", action.payload.data?.tempAuthToken);\n                    }\n                }\n            })\n            .addCase(regUser.rejected, (state, action) => {\n                state.registerStatus = \"error\";\n                const bodyError = action.payload.data?.errors || action.payload?.message;\n                state.errAuth = bodyError || \"Ошибка сервера. Попробуйте позже.\";\n            })\n            // --- loginUser ---\n            .addCase(loginUser.pending, (state) => {\n                state.loginStatus = \"pending\";\n                state.resendActStatus = initialState.resendActStatus;\n                state.registerStatus = initialState.registerStatus;\n                state.errAuth = null;\n            })\n            .addCase(loginUser.fulfilled, (state, action) => {\n                if (action.payload.success) {\n                    state.loginStatus = \"authenticated\";\n                    state.isAuth = true;\n                    state.tempAuthToken = initialState.tempAuthToken;\n                    localStorage.removeItem(\"tempAuthToken\");\n                    state.user = action.payload.data?.username || \"\";\n                    if (typeof action.payload.data?.accessToken === \"string\") {\n                        state.accessToken = action.payload.data?.accessToken;\n                        localStorage.setItem(\"accessToken\", action.payload.data?.accessToken);\n                    }\n                }\n            })\n            .addCase(loginUser.rejected, (state, action) => {\n                if (action.payload?.code === \"ACCOUNT_NOT_ACTIVATED\") {\n                    console.log(action.payload.data?.tempAuthToken);\n                    state.loginStatus = \"unactivated\";\n                    if (typeof action.payload.data?.tempAuthToken === \"string\") {\n                        state.tempAuthToken = action.payload.data?.tempAuthToken;\n                        localStorage.setItem(\"tempAuthToken\", action.payload.data?.tempAuthToken);\n                    }\n                } else {\n                    state.loginStatus = \"error\";\n                    const bodyError = action.payload.data?.errors || action.payload?.message;\n                    state.errAuth = bodyError || \"Ошибка сервера. Попробуйте позже.\";\n                }\n            })\n            // --- resendVerification ---\n            .addCase(resendVerification.pending, (state) => {\n                state.resendActStatus = \"pending\";\n                state.errAuth = null;\n            })\n            .addCase(resendVerification.fulfilled, (state, action) => {\n                if (action.payload.success) {\n                    state.resendActStatus = \"shipped\";\n                }\n            })\n            .addCase(resendVerification.rejected, (state, action) => {\n                state.resendActStatus = \"error\";\n                const bodyError = action.payload.data?.errors || action.payload?.message;\n                state.errAuth = bodyError || \"Ошибка сервера. Попробуйте позже.\";\n            })\n            // --- checkAuth ---\n            .addCase(checkAuth.pending, (state) => {\n                state.errAuth = null;\n            })\n            .addCase(checkAuth.fulfilled, (state, action) => {\n                if (action.payload.success) {\n                    state.loginStatus = \"authenticated\";\n                    state.isAuth = true;\n                    state.user = action.payload.data?.username || \"\";\n                    if (typeof action.payload.data?.accessToken === \"string\" && action.payload.data?.isNewToken) {\n                        state.accessToken = action.payload.data?.accessToken;\n                        if (typeof window !== 'undefined') localStorage.setItem(\"accessToken\", action.payload.data?.accessToken);\n                    }\n                }\n            })\n            .addCase(checkAuth.rejected, (state, action) => {\n                state.loginStatus = \"error\";\n                state.isAuth = false;\n                state.accessToken = null;\n                if (typeof window !== 'undefined') localStorage.removeItem(\"accessToken\");\n                const bodyError = action.payload.data?.errors || action.payload?.message;\n                state.errAuth = bodyError || \"Ошибка сервера. Попробуйте позже.\";\n            })\n    // .addCase(logout.fulfilled, (state) => {\n    //         state.accessToken = null;\n    //         localStorage.removeItem('accessToken');\n    //     })\n    },\n});\n\nexport const { setUserData, setUserIsAuth, clearError, setAuthToken, setResendCooldown, resetVerificationState } = userDataSlice.actions;\nexport default userDataSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport userDataSlice from \"./reducers/userData/userDataSlice\";\r\n\r\nexport function createStore(preloadedState = {}, serverReq = null) {\r\n    return configureStore({\r\n        reducer: {\r\n            userData: userDataSlice,\r\n        },\r\n        preloadedState,\r\n        middleware: (getDefaultMiddleware) =>\r\n            getDefaultMiddleware({\r\n                serializableCheck: false,\r\n                thunk: {\r\n                    extraArgument: { req: serverReq }\r\n                }\r\n            }),\r\n    });\r\n}","import React from 'react';\r\nimport { memo, useEffect, useState } from \"react\";\r\nimport \"./AuthForm.css\";\r\n\r\nconst initialState = {\r\n    username: import.meta.env.VITE_AUTH_NAME || \"\",\r\n    email: import.meta.env.VITE_AUTH_EMAIL || \"\",\r\n    password: import.meta.env.VITE_AUTH_PASS || \"\",\r\n    login: import.meta.env.VITE_AUTH_LOGIN || \"\",\r\n};\r\n\r\nfunction generateErrList(err) {\r\n    if (typeof err === \"string\") {\r\n        return <li key={err} className=\"auth__error\">{err}</li>;\r\n    }\r\n\r\n    if (React.isValidElement(err)) {\r\n        return <li className=\"auth__error\">{err}</li>;\r\n    }\r\n\r\n    if (Array.isArray(err)) {\r\n        return err.map((msg) => generateErrList(msg));\r\n    }\r\n\r\n    if (err && typeof err === \"object\") {\r\n        return Object.entries(err).flatMap(([_, value]) =>\r\n            generateErrList(value)\r\n        );\r\n    }\r\n\r\n    return <li className=\"auth__error\">{String(err)}</li>;\r\n}\r\n\r\nfunction AuthForm({ mode = 'login', onSubmit , externalError, validator}) {\r\n    const [form, setForm] = useState(initialState);\r\n    const [errors, setErrors] = useState({});\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setForm((prev) => ({ ...prev, [name]: value }));\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const validationErrors = validator(mode,\r\n            {\r\n                username: form.username,\r\n                email: form.email,\r\n                password: form.password,\r\n                login: form.login,\r\n            });\r\n\r\n        if (Object.keys(validationErrors).length > 0) {\r\n            setErrors(validationErrors);\r\n            return;\r\n        }\r\n        setErrors({});\r\n        if (mode === 'register') {\r\n            onSubmit({\r\n                username: form.username,\r\n                email: form.email,\r\n                password: form.password\r\n            });\r\n        } else {\r\n            onSubmit({\r\n                login: form.login,\r\n                password: form.password\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setForm(initialState);\r\n        setErrors({});\r\n    }, [mode]);\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"auth__form\">\r\n            <h2 className=\"auth__title\">{mode === 'register' ? 'Регистрация' : 'Авторизация'}</h2>\r\n\r\n            {mode === 'register' ? (\r\n                <div className=\"auth__field-box\">\r\n                    <label htmlFor='username'>Ник пользователя</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"username\"\r\n                        name=\"username\"\r\n                        value={form.username}\r\n                        onChange={handleChange}\r\n                        className=\"auth__input\"\r\n                        autoComplete=\"username\"\r\n                    />\r\n                </div>\r\n            ) : (\r\n                <div className=\"auth__field-box\">\r\n                    <label htmlFor='login'>Email</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"login\"\r\n                        name=\"login\"\r\n                        value={form.login}\r\n                        onChange={handleChange}\r\n                        className=\"auth__input\"\r\n                        autoComplete=\"username\"\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n            {mode === 'register' && (\r\n                <div className=\"auth__field-box\">\r\n                    <label htmlFor='email'>Email</label>\r\n                    <input\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        value={form.email}\r\n                        onChange={handleChange}\r\n                        className=\"auth__input\"\r\n                        autoComplete=\"email\"\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n            <div className=\"auth__field-box\">\r\n                <label htmlFor=\"password\">Пароль</label>\r\n                <input\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    value={form.password}\r\n                    onChange={handleChange}\r\n                    className=\"auth__input\"\r\n                    autoComplete=\"current-password\"\r\n                />\r\n            </div>\r\n\r\n            {(Object.keys(errors).length > 0 || externalError) && (\r\n                <>\r\n                    <hr className=\"auth__divider\" />\r\n                    <ul className=\"auth__errors\">\r\n                        {Object.keys(errors).length > 0 && generateErrList(errors)}\r\n                        {externalError && generateErrList(externalError)}\r\n                    </ul>\r\n                </>\r\n            )}\r\n\r\n            <button type=\"submit\" className=\"auth__button\">\r\n                {mode === 'register' ? 'Зарегистрироваться' : 'Войти'}\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default memo(AuthForm);","import { useEffect, useState } from \"react\";\r\nimport \"./UnverifiedNotice.css\";\r\n\r\nexport default function UnverifiedNotice({\r\n    onResend,\r\n    isLoading,\r\n    isSend,\r\n    hasToken,\r\n    error\r\n}) {\r\n    const [cooldown, setCooldown] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (isSend) {\r\n            setCooldown(60);\r\n            const timer = setInterval(() => {\r\n                setCooldown(prev => {\r\n                    if (prev <= 1) {\r\n                        clearInterval(timer);\r\n                        return 0;\r\n                    }\r\n                    return prev - 1;\r\n                });\r\n            }, 1000);\r\n            return () => clearInterval(timer);\r\n        }\r\n    }, [isSend]);\r\n\r\n    const getButtonState = () => {\r\n        if (!hasToken) {\r\n            return {\r\n                disabled: true,\r\n                text: 'Требуется авторизация',\r\n                hint: 'Время сессии истекло. Авторизуйтесь снова.'\r\n            };\r\n        }\r\n\r\n        if (isLoading) {\r\n            return {\r\n                disabled: true,\r\n                text: 'Отправка...'\r\n            };\r\n        }\r\n\r\n        if (cooldown > 0) {\r\n            return {\r\n                disabled: true,\r\n                text: `Повтор через ${cooldown} сек`\r\n            };\r\n        }\r\n\r\n        if (error) {\r\n            return {\r\n                disabled: false,\r\n                text: 'Повторить отправку',\r\n                hint: error\r\n            };\r\n        }\r\n\r\n        return {\r\n            disabled: false,\r\n            text: 'Отправить письмо повторно'\r\n        };\r\n    };\r\n\r\n    const buttonState = getButtonState();\r\n\r\n    return (\r\n        <div className=\"auth__unverified\">\r\n            <p>Аккаунт не активирован. Проверьте почту и подтвердите регистрацию.</p>\r\n            {buttonState.hint && <p className=\"auth__error-resend\">{buttonState.hint}</p>}\r\n            <button\r\n                type=\"button\"\r\n                onClick={onResend}\r\n                disabled={buttonState.disabled}\r\n                className=\"auth__resend-button\"\r\n            >\r\n                {buttonState.text}\r\n            </button>\r\n        </div>\r\n    );\r\n}","\"use strict\"; // Строгий режим\r\n// ----------------------- JavaScript -----------------------\r\nfunction validate (mode, {username, email, password, login}) {\r\n    // mode = 'register' или 'login'\r\n    const errs = {};\r\n\r\n    const usernameRegex = /^[A-Za-z0-9]{1,20}$/;\r\n    //const loginRegex = /^[A-Za-z0-9]+$/;\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    const passwordRegex = /^(?=.*[a-zA-Z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\w\\s]).{8,}$/;\r\n\r\n    const ERROR_MESSAGES = {\r\n        username: {\r\n            required: \"Введите логин\",\r\n            invalid: \"Логин может содержать только английские буквы и цифры, максимум 20 символов\",\r\n        },\r\n        email: {\r\n            required: \"Введите email\",\r\n            invalid: \"Некорректный email\",\r\n        },\r\n        login: {\r\n            required: \"Введите email\",\r\n            //invalidChars: \"Логин может содержать только латинские буквы и цифры\",\r\n            invalidEmail: \"Некорректный email\",\r\n            tooLong: \"Максимум 50 символов\",\r\n        },\r\n        password: {\r\n            required: \"Введите пароль\",\r\n            invalid: \"Пароль должен содержать минимум 8 символов, включая заглавную букву, цифру и спецсимвол\",\r\n        },\r\n    };\r\n\r\n    if (mode === 'register') {\r\n        if (!username.trim()) {\r\n            errs.username = ERROR_MESSAGES.username.required;\r\n        } else if (!usernameRegex.test(username)) {\r\n            errs.username = ERROR_MESSAGES.username.invalid;\r\n        }\r\n\r\n        if (!email.trim()) {\r\n            errs.email = ERROR_MESSAGES.email.required;\r\n        } else if (!emailRegex.test(email)) {\r\n            errs.email = ERROR_MESSAGES.email.invalid;\r\n        }\r\n    } else {\r\n        // В режиме login поле login — это только email\r\n        if (!login.trim()) {\r\n            errs.identifier = ERROR_MESSAGES.login.required;\r\n        } else if (login.length > 50) {\r\n            errs.identifier = ERROR_MESSAGES.login.tooLong;\r\n        } else if (!emailRegex.test(login)) {\r\n            errs.identifier = ERROR_MESSAGES.login.invalidEmail;\r\n        }\r\n    }\r\n\r\n    // Валидация поля login, когда логином может быть username или email\r\n    // else {\r\n    //     if (!login.trim()) {\r\n    //         errs.identifier = ERROR_MESSAGES.login.required;\r\n    //     } else if (login.length > 50) {\r\n    //         errs.identifier = ERROR_MESSAGES.login.tooLong;\r\n    //     } else if (login.includes(\"@\")) {\r\n    //         if (!emailRegex.test(login)) {\r\n    //             errs.login = ERROR_MESSAGES.login.invalidEmail;\r\n    //         }\r\n    //     } else {\r\n    //         if (!loginRegex.test(login)) {\r\n    //             errs.login = ERROR_MESSAGES.login.invalidChars;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if (!password.trim()) {\r\n        errs.password = ERROR_MESSAGES.password.required;\r\n    } else if (mode === 'register' && !passwordRegex.test(password)) {\r\n        errs.password = ERROR_MESSAGES.password.invalid;\r\n    }\r\n\r\n    return errs;\r\n}\r\n\r\nexport default validate;","export const CLIENT_ROUTES = {\r\n    all: \"*\",\r\n    root: \"/\",\r\n    auth: {\r\n        base: \"/auth\",\r\n        login: \"/auth/sign-in\",\r\n        register: \"/auth/sign-up\",\r\n        verified: \"/auth/verified\",\r\n    },\r\n    user: {\r\n        profile: \"/user/:id\",\r\n        //getProfile: (id) => `/user/${id}`,\r\n    },\r\n    app: {\r\n        home: \"/messaria\",\r\n    },\r\n    error: \"/error\",\r\n};\r\n","import { useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport AuthForm from \"../../components/Auth/AuthForm/AuthForm\";\nimport \"./PageAuth.css\";\nimport UnverifiedNotice from \"../../components/Auth/UnverifiedNotice/UnverifiedNotice\";\nimport validate from \"../../utils/validateAuthForm\";\nimport {\n    regUser,\n    loginUser,\n    setAuthToken,\n    clearError,\n    resendVerification,\n} from \"../../redux/reducers/userData/userDataSlice\";\nimport { memo, useEffect } from \"react\";\nimport { CLIENT_ROUTES } from \"../../constants/clientRoutes\";\n\nfunction PageAuth({ mode }) {\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n    const { tempAuthToken, errAuth, isAuth, registerStatus, loginStatus, resendActStatus } = useSelector((state) => state.userData);\n\n    // Обработка авторизации и активации\n    useEffect(() => {\n        if (isAuth) {\n            navigate(CLIENT_ROUTES.app.home);\n        } else if (loginStatus === \"unactivated\") {\n            navigate(CLIENT_ROUTES.auth.verified);\n        }\n    }, [isAuth, loginStatus]);\n\n    useEffect(() => {\n        if (registerStatus === \"registered\") {\n            navigate(CLIENT_ROUTES.auth.verified);\n        }\n    }, [registerStatus]);\n\n    const handleSubmit = async (data) => {\n        const action = mode === \"register\" ? regUser(data) : loginUser(data);\n        await dispatch(action);\n    };\n\n    const handleResend = async () => {\n        await dispatch(resendVerification());\n    };\n\n    const handleSwitchMode = () => {\n        dispatch(clearError(true));\n        let to;\n        switch (mode) {\n            case \"register\":\n                to = CLIENT_ROUTES.auth.login;\n                break;\n            case \"login\":\n                to = CLIENT_ROUTES.auth.register;\n                break;\n            case \"verified\":\n                to = CLIENT_ROUTES.auth.login;\n                break;\n        }\n        navigate(to);\n    };\n\n    useEffect(() => {\n        const token = localStorage.getItem(\"tempAuthToken\");\n        if (token) dispatch(setAuthToken(token));\n        if (mode === \"verified\" && !token) navigate(CLIENT_ROUTES.auth.login);\n    }, []);\n\n    return (\n        <div className=\"auth__container\">\n            {(mode === \"register\" || mode === \"login\") && (\n                <AuthForm\n                    mode={mode}\n                    onSubmit={handleSubmit}\n                    validator={validate}\n                    externalError={errAuth ? errAuth : \"\"}\n                />\n            )}\n            {mode === \"verified\" && (\n                <UnverifiedNotice\n                    onResend={handleResend}\n                    isLoading={resendActStatus === \"pending\"}\n                    isSend={resendActStatus === \"shipped\"}\n                    hasToken={!!tempAuthToken}\n                    error={errAuth}\n                />\n            )}\n            <button\n                className=\"auth__button\"\n                onClick={() => handleSwitchMode(mode)}\n            >\n                {mode === \"register\" && \"Уже есть аккаунт? Войти\"}\n                {mode === \"login\" && \"Нет аккаунта? Зарегистрироваться\"}\n                {mode === \"verified\" && \"Подтвердил почту? Авторизация\"}\n            </button>\n        </div>\n    );\n}\n\nexport default memo(PageAuth);","import { useSearchParams } from 'react-router-dom';\r\n\r\nconst ErrorPage = () => {\r\n    const [searchParams] = useSearchParams();\r\n\r\n    // Получаем параметры из URL (если их нет — ставим значения по умолчанию)\r\n    const errorCode = searchParams.get('code') || '400';\r\n    const errorMessage = searchParams.get('message') || 'Произошла ошибка';\r\n\r\n    return (\r\n        <div className=\"error-page\">\r\n            <h1>Ошибка {errorCode}</h1>\r\n            <p>{decodeURIComponent(errorMessage)}</p>\r\n            <a href=\"/\">Вернуться на главную</a>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorPage;","import { Link } from \"react-router-dom\";\r\n\r\n\r\nconst MessariaPage = () => {\r\n\r\n    return (\r\n        <div className=\"error-page\">\r\n            <h1>Добро пожаловать</h1>\r\n            <Link to={'/messaria'}>тык</Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MessariaPage;","import PageAuth from \"../pages/Auth/PageAuth\";\r\nimport SafeNavigate from \"../components/routes/SafeNavigate\";\r\nimport { Outlet } from \"react-router-dom\";\r\nimport { CLIENT_ROUTES } from \"../constants/clientRoutes\";\r\nimport ErrorPage from \"../pages/ErrorPage\";\r\nimport { checkAuth } from \"../redux/reducers/userData/userDataSlice\";\r\nimport MessariaPage from \"../pages/Messaria\";\r\n\r\nfunction relativePath(fullPath, basePath) {\r\n    if (basePath === undefined) {\r\n        // Если передан только fullPath, удаляем ведущий слэш\r\n        return fullPath.replace(/^\\//, \"\");\r\n    } else {\r\n        // Если переданы оба аргумента\r\n        if (fullPath.startsWith(basePath)) {\r\n            return fullPath.slice(basePath.length).replace(/^\\//, \"\");\r\n        }\r\n        return fullPath;\r\n    }\r\n}\r\n\r\nexport const routeConfig = [\r\n    {\r\n        path: CLIENT_ROUTES.all,\r\n        element: <Outlet />,\r\n        children: [\r\n            {\r\n                path: relativePath(CLIENT_ROUTES.auth.base),\r\n                element: <Outlet />,\r\n                children: [\r\n                    {\r\n                        path: relativePath(CLIENT_ROUTES.auth.login, CLIENT_ROUTES.auth.base),\r\n                        element: <PageAuth mode=\"login\" />,\r\n                    },\r\n                    {\r\n                        path: relativePath(CLIENT_ROUTES.auth.register, CLIENT_ROUTES.auth.base),\r\n                        element: <PageAuth mode=\"register\" />,\r\n                    },\r\n                    {\r\n                        path: relativePath(CLIENT_ROUTES.auth.verified, CLIENT_ROUTES.auth.base),\r\n                        element: <PageAuth mode=\"verified\" />,\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                path: relativePath(CLIENT_ROUTES.app.home),\r\n                element: <MessariaPage/>,\r\n                private: true,\r\n                privateRedirectTo: CLIENT_ROUTES.auth.login,\r\n                ssrLoadData: () => checkAuth(), // Thunk\r\n            },\r\n            {\r\n                path: relativePath(CLIENT_ROUTES.error),\r\n                element: <ErrorPage/>,\r\n            },\r\n            {\r\n                path: CLIENT_ROUTES.all, // любая ошибочная страница отправляет на авторизацию\r\n                element: <SafeNavigate to={CLIENT_ROUTES.auth.login} replace />,\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\n// path – путь маршрута (например, полный \"auth/sign-in\", разложенный если есть children \"home\">\"albums\", *);\r\n// element – компонент, который будет отрисован по этому маршруту;\r\n// private – если true, маршрут считается приватным и требует авторизации;\r\n// privateRedirectTo – путь, на который перенаправляется пользователь, если он не авторизован;\r\n// ---publicRedirectTo – используется для публичных маршрутов, если нужно сделать редирект;\r\n// children – вложенные маршруты (подмаршруты), также могут содержать те же поля;","import { StaticRouter } from \"react-router-dom/server\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"./redux/store\";\nimport App from \"./App\";\nimport { matchRoutes } from \"react-router-dom\";\nimport { routeConfig } from \"./routes/routes\";\nimport { createContext, useContext } from \"react\";\n\nexport async function createApp(req, context) {\n    const store = createStore({}, req);\n\n    async function loadDataForMatchedRoutes(url, store) {\n        const matchedRoutes = matchRoutes(routeConfig, url);\n        console.log(\"Выполняется SSR - \",url);\n\n        // вызов ssrLoadData из маршрутов\n        const promisesFromRoutes = matchedRoutes\n            .filter(({ route }) => route.ssrLoadData)\n            .map(({ route }) => store.dispatch(route.ssrLoadData()));\n\n        // вызов fetchData из компонентов\n        const promisesFromComponents = [];\n\n        matchedRoutes.forEach(({ route, params }) => {\n            const Component = route.element?.type; // если route.element — React элемент\n            if (Component && Component.fetchData) {\n                promisesFromComponents.push(Component.fetchData(store, params));\n            }\n        });\n\n        await Promise.all([...promisesFromRoutes, ...promisesFromComponents]);\n    }\n    await loadDataForMatchedRoutes(req.originalUrl, store);\n\n    context.preloadedState = store.getState();\n\n    return (\n        <SSRContext.Provider value={context}>\n            <Provider store={store}>\n                <StaticRouter location={req.originalUrl} context={context}>\n                    <App />\n                </StaticRouter>\n            </Provider>\n        </SSRContext.Provider>\n    );\n}\n\nexport const SSRContext = createContext(null);\n\nexport function useSSRContext() {\n    return useContext(SSRContext);\n}","import { Navigate } from \"react-router-dom\";\nimport { useSSRContext } from \"../../entry-server\";\n\nexport default function SafeNavigate({ to }) {\n    const context = useSSRContext()\n    if (typeof window === \"undefined\") {\n        context.url = to;\n        return null;\n    }\n    return <Navigate to={to} replace />;\n}","import { useEffect, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { checkAuth } from '../../redux/reducers/userData/userDataSlice';\r\nimport SafeNavigate from \"./SafeNavigate\";\r\n\r\nconst ProtectedRoute = ({ children, redirectTo }) => {\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const { isAuth, accessToken } = useSelector(state => state.userData);\r\n\r\n    const didInit = useRef(false);\r\n\r\n    useEffect(() => {\r\n        if (!didInit.current) {\r\n            didInit.current = true;\r\n            if (accessToken) return;\r\n        }\r\n        if (!isAuth) {\r\n            dispatch(checkAuth())\r\n            .unwrap()\r\n            .catch(() => navigate(redirectTo, { replace: true }));\r\n        }\r\n    }, [isAuth, dispatch, navigate, accessToken]);\r\n\r\n    return isAuth ? children : <SafeNavigate to={redirectTo} />;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n","import { Route, Routes } from \"react-router-dom\";\r\nimport ProtectedRoute from \"../components/routes/ProtectedRoute\";\r\nimport { routeConfig } from \"./routes\";\r\n\r\nfunction renderRoutes(routes) {\r\n    return routes.map((route, idx) => {\r\n        const element = route.private ? (\r\n            <ProtectedRoute redirectTo={route.privateRedirectTo}>\r\n                {route.element}\r\n            </ProtectedRoute>\r\n        ) : (\r\n            route.element\r\n        );\r\n\r\n\r\n        return (\r\n            <Route key={idx} path={route.path} element={element}>\r\n                {route.children && renderRoutes(route.children)}\r\n            </Route>\r\n        );\r\n    });\r\n}\r\n\r\nexport default function PagesRouter() {\r\n    return <Routes>{renderRoutes(routeConfig)}</Routes>;\r\n}","import \"./App.css\";\nimport PagesRouter from \"./routes/PagesRouter\";\n\nfunction App() {\n\n    return (\n        <div className=\"container\">\n            <div className=\"app__box\">\n                <PagesRouter/>\n            </div>\n        </div>\n    );\n}\n\n// App.fetchData = (store, params) => {\n//     // вызываем thunk через dispatch и возвращаем Promise\n//     //return store.dispatch(loginUser());\n// };\n\nexport default App;","import { createRoot, hydrateRoot } from \"react-dom/client\";\nimport \"./main.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from './redux/store';\n\nconst syncAuthState = (state) => {\n\tif (state?.userData?.accessToken) {\n\t\tlocalStorage.setItem('accessToken', state.userData.accessToken);\n\t}\n};\n\nconst init100vh = () => {\n\tconst setHeight = () => {\n\t\tconst vh = window.innerHeight;\n\t\tdocument.documentElement.style.setProperty('--vh', `${vh}px`);\n\t};\n\tsetHeight();\n\twindow.addEventListener('resize', setHeight);\n};\n\nconst preloadedState = window.__PRELOADED_STATE__;\ndelete window.__PRELOADED_STATE__;\nconst store = createStore(preloadedState);\n\nif (typeof window !== 'undefined') {\n\tsyncAuthState(preloadedState);\n\tinit100vh();\n}\n\nconst RootApp = () => (\n\t<Provider store={store}>\n\t\t<BrowserRouter future={{ v7_startTransition: true, v7_relativeSplatPath: true }}>\n\t\t\t<App />\n\t\t</BrowserRouter>\n\t</Provider>\n);\n\n// Рендер в зависимости от режима (Vite или SSR)\nif (import.meta.env.MODE === 'development') {\n\tcreateRoot(document.getElementById('root')).render(<RootApp />);\n} else {\n\thydrateRoot(document.getElementById('root'), <RootApp />);\n}"],"names":["initialState","preloadedState","userDataSlice","jsx","useState","useEffect","jsxs","Fragment","memo","AuthForm","PageAuth","createContext","useContext","useRef","Provider","hydrateRoot"],"mappings":"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"}